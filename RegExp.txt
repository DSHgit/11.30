
---------------------------------------------------------------------正则表达式Regular Expression
1、正则：主要用来匹配（擅长匹配模糊范围的）字符串，是一种规则，接收字符串（默认是区分大小写的，如果不区分大小写的话，在正则的最后加标识i）
例如：var re = /a/i; / var re = new RegExp（‘a’,‘i’）；

正则表达式：建议采用简写，性能高（但是当正则需要传参的时候必须使用全称的写法）
var re = new RegExp（‘a’）；/var re = /a/;

在双斜杠里写内容是正则独有的写法
i、g都是修饰符，都在正则后面，但是不分先后顺序

2、正则表达式常用方法：(中文的区间范围：/[\u4e00-\u9fa5]/)
1)、test：正则去匹配字符串，如果匹配成功就返回真，否则就返回假；（从字符串中找正则中的内容）

test的写法：正则.test（str）;

转义字符：给某个字符前面加个反斜杠（\）,含义会改变

\s:空格
\S：非空格
\d：1个数字；\d+表示找多个连续的数字
\D：非数字
\w：字符（只代表字母、数字、下划线_）
\W：非字符
\r：回车
\t：制表符
\'：单引号
\“：双引号
\n：换行
\b：单词的边界符
\B：非边界符
.：任意一个字符（除了\n）

2)、search：正则去匹配字符串，如果匹配成功就返回成功的位置，否则就返回-1；（和str.indexOf(str)用法相同，但是indexOf只接收字符串）

search的写法：str.search（正则或者str）;

3)、match：正则去匹配字符串，如果匹配成功就返回匹配成功的数组，否则就返回null；

match的写法：str.match（正则）;

正则默认：正则匹配成功就会结束，不会继续匹配；如果想全部查找，就要给正则后面加标识g（global全局）

量词+：匹配不确定的位置，最少有1个，最多不限（+表示至少出现一次，放在元素后面）

4)、replace：正则去匹配字符串，匹配成功的字符会被替换新的字符串（敏感词过滤）

replace的写法：str.replace（正则或者str,新的字符串或者回调函数）;

| 在正则中是或的意思，当要进行多次替换时可以用到|；

replace的第二个参数可以是字符串，也可以是一个回调函数(函数的第一个参数就是匹配成功的字符$0，第二个参数是每次匹配到的字符的位置（index）$1，第三个参数是整个字符串$2,$3后面都是undefined)
注意：如果有子项，有几个子项，$0后面就有几个$n，然后接着排后面的$；
回调函数中必须有return，返回值就是替换的内容，否则就为undefined

3、匹配子项：小括号（），从左往右依次计算子项个数,只要正则中有子项，那么replace回调函数中从第二个参数开始，就是匹配到的子项（不再是索引）

1）把正则的整体叫（母亲），然后把左边第一个小括号里面的正则叫做这个第一个子项（母亲的第一个孩子）

第二个小括号就是第二个孩子

2）字符串.match（正则）;当match不加g的时候可以获取到子项的集合。例子如下：
var str = ‘abc’;
var re = /（a）（b）（c）/;
alert(str.match(re));  返回值为abc， a， b， c 

3）括号（）的作用：子级/提高优先级

4）括号[]中可以为任意一个字符，里面的元素都是或的关系

4、字符类：一组相似的元素或者字符（[]中括号整体代表一个字符）

1）、排除符号^：如果^写在[]里面的话，就代表排除的意思（^如果在正则开头写，就是开头的意思；$在正则末尾写，就为末尾）

2）、范围：[a-z]表示从a到z的一个范围，必须先小后大

3）、任意字符（去除标签没听话明白，课堂提问）

5、转义字符：（\n表示换行）

.（点）：表示任意字符（\.表示真正的点）

\b表示独立的部分（起始，结束，空格）
\B表示非独立的部分

特殊字符想输出时，要用两个反斜杠才能输出;（也就是说如果在字符串中有\，就必须要用\\来转义）

6、重复子项：（注意匹配重复的子项时有时必须是相同的数字或者字母）
\1：重复的第一个子项
\2：重复的第二个子项

7、重复数：
/(/d)\1/   表示在字符串中查找只重复一次的数（只找第一个，比如33）
/(/d)\1+/  表示在字符串中查找连续重复多次的数（只找第一个，比如33333）
/(/d)\1+/g 表示在字符串中查找所有连续重复多次的数（找所有的，比如33333，44444,11111）

8、?：最小可以没有，最大有一个

9、量词+：匹配不确定的位置，最少有1个，最多不限（+表示至少出现一次，放在元素后面）

{n,m}  最小n个，最大m个
{n,}   最小n个，最多不限
{1,}  最小1次，最多不限，（相当于?）
{0,1}  最小0次，最多1次，（相当于?）
{0,}   最小可以没有，最大无限
注意：量词都是修饰它前面那个规则的

比如：
a*    a可以没有也可以无限
[a-z]*  a-z 可以没有也可以无限
\d2+  一个数字和至少1个2   
(\d2)+  32526272

10、边界符\b：在数字、字母、下划线中是有边界符的。



JS面向对象 Object Oriented Programming

--------------------------------------------------------------------------------初级面向对象：

1、组成：方法和属性（判断方法：后面有括号就是方法，没括号就是属性）

方法：函数：过程、动态的（对象下面的函数叫对象的方法，比如push和sort）

属性：变量：静态（对象下面的变量叫对象的属性）


2、创建面向对象程序：

数组有自己的方法和属性，但是空对象没有方法和属性，我们可以给空对象添加方法和属性

3、工厂方式（封装函数）

重点理解this指向，先看在哪里调用，如果前面没其他东西，直接指向window，如果前面有东西，在哪里调用就指向谁

当new去调用一个函数，这个时候函数中的this就是创建出来的对象，而且函数的返回值就是this（也就是隐式返回）

new后面调用的函数叫构造函数

4、对象引用：

基本类型：赋值的时候只是值的复制（比较时只要值相同就是true）

对象类型：赋值不仅是值的复制，而且也是引用的传递（它会改变原有对象）（比较时值和引用都相同才是true）

5、原型：去改写对象下面公用的方法或属性，让公用的方法或属性在内存中只存在一份，目的是提高性能

原型：类似CSS中的class（优先级低，复用性高）

普通方法：类似css中的style（优先级高，但是不能复用）

原型-prototype：要写在构造函数的下面

6、面向对象写法与使用：

写法：
function 构造函数（形参）{
	this.属性 = 形参;
}
构造函数.原型.方法 = function（）{ };

使用：
var 对象1 = new 构造函数（实参）;
对象1.方法（）;

7、面向对象的编写原则：
1）、先写出普通的写法，然后改成面向对象写法

普通方法变型：
a、尽量不要出现函数嵌套函数
b、可以有全局变量
c、把onload中不是赋值的语句放到单独函数中

改成面向对象：
a、全局变量就是属性
b、函数就是方法
c、Onload中创建对象
d、改this指向问题


---------------------------------------------------------------------------高级面向对象：

1、在JS源码：系统对象也是基于原型的程序（尽量不要去修改或者添加系统对象下面的方法和属性）

2、